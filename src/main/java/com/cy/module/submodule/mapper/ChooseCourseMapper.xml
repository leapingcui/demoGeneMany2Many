<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cy.module.submodule.mapper.ChooseCourseMapper" >
  <resultMap id="MultiResultMap" type="com.cy.module.submodule.entity.ChooseCourseMulti">
    <association property="student" resultMap="com.cy.module.submodule.mapper.StudentMapper.BaseResultMap"/>
    <association property="course" resultMap="com.cy.module.submodule.mapper.CourseMapper.BaseResultMap"/>
    <association property="chooseCourse" resultMap="com.cy.module.submodule.mapper.ChooseCourseMapper.BaseResultMap"/>
  </resultMap>

  <resultMap id="BaseResultMap" type="com.cy.module.submodule.entity.ChooseCourse" >
    <id column="cc_sid" property="ccSid" jdbcType="INTEGER" />
    <id column="cc_cid" property="ccCid" jdbcType="VARCHAR" />
    <result column="cc_grade" property="ccGrade" jdbcType="INTEGER" />
  </resultMap>
  <!--多表sql-->
  <sql id="Example_Where_Clause" >
      <foreach collection="chooseCourseExample.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
        </if>
      </foreach>
  </sql>
  <!--单表sql-->
  <sql id="Example_Where_Clause_Single" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause_Single" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    cc_sid, cc_cid, cc_grade
  </sql>

  <!--多表条件查询-->
  <select id="selectMultiByExample" resultMap="MultiResultMap" parameterType="com.cy.module.submodule.entity.ChooseCourseMultiExample" >
    select
    <if test="chooseCourseExample.distinct" >
      distinct
    </if>
    <include refid="com.cy.module.submodule.mapper.StudentMapper.Base_Column_List" />
    ,
    <include refid="com.cy.module.submodule.mapper.CourseMapper.Base_Column_List" />
    ,
    <include refid="com.cy.module.submodule.mapper.ChooseCourseMapper.Base_Column_List" />
    FROM student
    INNER JOIN choose_course
    ON student.sid = choose_course.cc_sid
    INNER JOIN course
    ON choose_course.cc_cid = course.cid
    <if test="_parameter != null" >
      <where>
        <trim prefix="(" suffix=")" prefixOverrides="and">
          <include refid="com.cy.module.submodule.mapper.StudentMapper.Example_Where_Clause"/>
          <include refid="com.cy.module.submodule.mapper.CourseMapper.Example_Where_Clause"/>
          <include refid="com.cy.module.submodule.mapper.ChooseCourseMapper.Example_Where_Clause"/>
        </trim>
      </where>
    </if>
    <if test="chooseCourseExample.orderByClause != null" >
      order by ${chooseCourseExample.orderByClause}
    </if>
  </select>

  <!--单表条件查询-->
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.cy.module.submodule.entity.ChooseCourseExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from choose_course
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause_Single" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.cy.module.submodule.entity.ChooseCourse" >
    select 
    <include refid="Base_Column_List" />
    from choose_course
    where cc_sid = #{ccSid,jdbcType=INTEGER}
      and cc_cid = #{ccCid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.cy.module.submodule.entity.ChooseCourse" >
    delete from choose_course
    where cc_sid = #{ccSid,jdbcType=INTEGER}
      and cc_cid = #{ccCid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.cy.module.submodule.entity.ChooseCourseExample" >
    delete from choose_course
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause_Single" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cy.module.submodule.entity.ChooseCourse" >
    insert into choose_course (cc_sid, cc_cid, cc_grade
      )
    values (#{ccSid,jdbcType=INTEGER}, #{ccCid,jdbcType=VARCHAR}, #{ccGrade,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.cy.module.submodule.entity.ChooseCourse" >
    insert into choose_course
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="ccSid != null" >
        cc_sid,
      </if>
      <if test="ccCid != null" >
        cc_cid,
      </if>
      <if test="ccGrade != null" >
        cc_grade,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="ccSid != null" >
        #{ccSid,jdbcType=INTEGER},
      </if>
      <if test="ccCid != null" >
        #{ccCid,jdbcType=VARCHAR},
      </if>
      <if test="ccGrade != null" >
        #{ccGrade,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cy.module.submodule.entity.ChooseCourseExample" resultType="java.lang.Integer" >
    select count(*) from choose_course
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause_Single" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update choose_course
    <set >
      <if test="record.ccSid != null" >
        cc_sid = #{record.ccSid,jdbcType=INTEGER},
      </if>
      <if test="record.ccCid != null" >
        cc_cid = #{record.ccCid,jdbcType=VARCHAR},
      </if>
      <if test="record.ccGrade != null" >
        cc_grade = #{record.ccGrade,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause_Single" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update choose_course
    set cc_sid = #{record.ccSid,jdbcType=INTEGER},
      cc_cid = #{record.ccCid,jdbcType=VARCHAR},
      cc_grade = #{record.ccGrade,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause_Single" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cy.module.submodule.entity.ChooseCourse" >
    update choose_course
    <set >
      <if test="ccGrade != null" >
        cc_grade = #{ccGrade,jdbcType=INTEGER},
      </if>
    </set>
    where cc_sid = #{ccSid,jdbcType=INTEGER}
      and cc_cid = #{ccCid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cy.module.submodule.entity.ChooseCourse" >
    update choose_course
    set cc_grade = #{ccGrade,jdbcType=INTEGER}
    where cc_sid = #{ccSid,jdbcType=INTEGER}
      and cc_cid = #{ccCid,jdbcType=VARCHAR}
  </update>
</mapper>